name: EntryTracker CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_test_publish:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-south-1
      ECR_REPOSITORY: entrytracker
      DB_HOST: mysql_db
      DB_USER: root
      DB_PASSWORD: mysecretpassword
      DB_NAME: app_db

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Standalone App for Unit Test
        run: |
          echo "Starting Flask app in background..."
          python app.py &
          APP_PID=$!
          echo "App PID: $APP_PID"
          echo "Waiting for app to start..."
          sleep 5
          echo "Running curl test..."
          curl -f http://localhost:5000/ || exit 1
          echo "Stopping Flask app..."
          kill $APP_PID
          sleep 2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t entrytracker:latest .

      - name: Start services for E2E tests
        run: docker-compose up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to initialize..."
          sleep 15

      - name: Run E2E test (curl)
        run: |
          echo "Running curl test against composed app..."
          curl -f http://localhost:5000/ || exit 1

      - name: Stop services after E2E tests
        if: always()
        run: docker-compose down

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag and Push image to Amazon ECR
        env:
          ECR_REGISTRY_URL: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          docker tag entrytracker:latest $ECR_REGISTRY_URL/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY_URL/$ECR_REPOSITORY:$IMAGE_TAG
