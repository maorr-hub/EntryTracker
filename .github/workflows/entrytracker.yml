name: EntryTracker CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_test_publish:
    runs-on: ubuntu-latest
    outputs: # Define outputs for this job
      version_tag: ${{ steps.set_version.outputs.tag }} # Output the version tag

    env:
      AWS_REGION: ap-south-1
      ECR_REPOSITORY: entrytracker
      DB_HOST: mysql_db
      DB_USER: root
      DB_PASSWORD: mysecretpassword
      DB_NAME: app_db
      IMAGE_NAME: entrytracker # Local image name

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Standalone App for Unit Test
        run: |
          echo "Starting Flask app in background..."
          python app.py &
          APP_PID=$!
          echo "App PID: $APP_PID"
          echo "Waiting for app to start..."
          sleep 5
          echo "Running curl test..."
          curl -f http://localhost:5000/ || exit 1
          echo "Stopping Flask app..."
          kill $APP_PID
          sleep 2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }}:latest .

      - name: Start services for E2E tests
        run: docker compose up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to initialize..."
          sleep 15

      - name: Run E2E test (curl)
        id: e2e_test
        continue-on-error: true
        run: |
          echo "Running curl test against Nginx on port 80..."
          curl -f http://localhost:80/ || exit 1

      - name: Check E2E test result and show logs on failure
        if: steps.e2e_test.outcome == 'failure'
        run: |
          echo "E2E test failed. Displaying Docker Compose logs..."
          docker compose logs
          exit 1

      - name: Stop services after E2E tests
        if: always()
        run: docker compose down

      - name: Set Version Tag
        id: set_version
        run: echo "tag=1.0.${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag and Push image to Amazon ECR
        env:
          ECR_REGISTRY_URL: ${{ steps.login-ecr.outputs.registry }}
          VERSION_TAG: ${{ steps.set_version.outputs.tag }}
        run: |
          echo "Tagging image with version: $VERSION_TAG"
          docker tag ${{ env.IMAGE_NAME }}:latest $ECR_REGISTRY_URL/$ECR_REPOSITORY:$VERSION_TAG
          docker push $ECR_REGISTRY_URL/$ECR_REPOSITORY:$VERSION_TAG
          
          echo "Tagging image with latest"
          docker tag ${{ env.IMAGE_NAME }}:latest $ECR_REGISTRY_URL/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY_URL/$ECR_REPOSITORY:latest

  deploy:
    needs: build_test_publish
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    env:
      AWS_REGION: ap-south-1
      ECR_REPOSITORY: entrytracker
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ubuntu
      EC2_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      APP_SERVICE_NAME: entrytracker_app
      # Get the version tag from the build_test_publish job's output
      APP_VERSION_TAG: ${{ needs.build_test_publish.outputs.version_tag }}

    steps:
      - name: Deploy to EC2 Staging Instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          script: |
            cd ~/app

            echo "Logging in to AWS ECR..."
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

            echo "Pulling specific version: ${{ env.APP_VERSION_TAG }} for the application service..."
            docker pull ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.APP_VERSION_TAG }}

            echo "Restarting services with version: ${{ env.APP_VERSION_TAG }} (includes Nginx)..."
            # Export the version as an environment variable for docker-compose to use
            export APP_VERSION=${{ env.APP_VERSION_TAG }}
            docker compose up -d

            echo "Cleaning up unused Docker images..."
            docker image prune -af
